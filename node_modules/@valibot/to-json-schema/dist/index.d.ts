import { JSONSchema7 } from 'json-schema';
export { JSONSchema7 } from 'json-schema';
import * as v from 'valibot';

/**
 * JSON Schema conversion context interface.
 */
interface ConversionContext {
    /**
     * The JSON Schema definitions.
     */
    readonly definitions: Record<string, JSONSchema7>;
    /**
     * The JSON Schema reference map.
     */
    readonly referenceMap: Map<v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>, string>;
    /**
     * The lazy schema getter map.
     */
    readonly getterMap: Map<(input: unknown) => v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>, v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>>;
}
/**
 * JSON Schema override context interface for schemas.
 *
 * @beta
 */
interface OverrideSchemaContext extends ConversionContext {
    /**
     * The JSON Schema reference ID.
     */
    referenceId: string | undefined;
    /**
     * The Valibot schema to be converted.
     */
    valibotSchema: v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>;
    /**
     * The converted JSON Schema.
     */
    jsonSchema: JSONSchema7;
    /**
     * The errors of the current Valibot schema conversion.
     */
    errors: [string, ...string[]] | undefined;
}
/**
 * JSON Schema override context interface for actions.
 *
 * @beta
 */
interface OverrideActionContext {
    /**
     * The Valibot action to be converted.
     */
    valibotAction: v.PipeAction<any, any, v.BaseIssue<unknown>>;
    /**
     * The converted JSON Schema.
     */
    jsonSchema: JSONSchema7;
    /**
     * The errors of the current Valibot action conversion.
     */
    errors: [string, ...string[]] | undefined;
}
/**
 * JSON Schema override context interface for references.
 *
 * @beta
 */
interface OverrideRefContext extends ConversionContext {
    /**
     * The JSON Schema reference ID.
     */
    referenceId: string;
    /**
     * The Valibot schema to be converted.
     */
    valibotSchema: v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>;
    /**
     * The converted JSON Schema.
     */
    jsonSchema: JSONSchema7;
}
/**
 * JSON Schema conversion config interface.
 */
interface ConversionConfig {
    /**
     * The policy for handling incompatible schemas and actions.
     */
    readonly errorMode?: 'throw' | 'warn' | 'ignore';
    /**
     * The schema definitions for constructing recursive schemas. If not
     * specified, the definitions are generated automatically.
     */
    readonly definitions?: Record<string, v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>>;
    /**
     * Overrides the JSON Schema conversion for a specific Valibot schema.
     *
     * @param context The conversion context.
     *
     * @returns A JSON Schema, if overridden.
     *
     * @beta
     */
    readonly overrideSchema?: (context: OverrideSchemaContext) => JSONSchema7 | null | undefined;
    /**
     * Overrides the JSON Schema reference for a specific Valibot action.
     *
     * @param context The conversion context.
     *
     * @returns A JSON Schema, if overridden.
     *
     * @beta
     */
    readonly overrideAction?: (context: OverrideActionContext) => JSONSchema7 | null | undefined;
    /**
     * Overrides the JSON Schema reference for a specific reference ID.
     *
     * @param context The conversion context.
     *
     * @returns A reference ID, if overridden.
     *
     * @beta
     */
    readonly overrideRef?: (context: OverrideRefContext) => string | null | undefined;
}

/**
 * Adds new definitions to the global schema definitions.
 *
 * @param definitions The schema definitions.
 *
 * @beta
 */
declare function addGlobalDefs(definitions: Record<string, v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>>): void;
/**
 * Returns the current global schema definitions.
 *
 * @returns The schema definitions.
 *
 * @beta
 */
declare function getGlobalDefs(): Record<string, v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>> | undefined;

/**
 * Converts a Valibot schema to the JSON Schema format.
 *
 * @param schema The Valibot schema object.
 * @param config The JSON Schema configuration.
 *
 * @returns The converted JSON Schema.
 */
declare function toJsonSchema(schema: v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>, config?: ConversionConfig): JSONSchema7;

/**
 * Converts Valibot schema definitions to JSON Schema definitions.
 *
 * @param definitions The Valibot schema definitions.
 * @param config The JSON Schema configuration.
 *
 * @returns The converted JSON Schema definitions.
 */
declare function toJsonSchemaDefs<TDefinitions extends Record<string, v.BaseSchema<unknown, unknown, v.BaseIssue<unknown>>>>(definitions: TDefinitions, config?: Omit<ConversionConfig, 'definitions'>): {
    [TKey in keyof TDefinitions]: JSONSchema7;
};

export { type ConversionConfig, addGlobalDefs, getGlobalDefs, toJsonSchema, toJsonSchemaDefs };
